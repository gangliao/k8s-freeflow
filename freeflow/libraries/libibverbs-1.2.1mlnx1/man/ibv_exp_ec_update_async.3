.\" -*- nroff -*-
.\"
.TH IBV_EXP_EC_UPDATE_ASYNC 3 2016-03-07 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_exp_ec_update_sync, ibv_exp_ec_update_async  \- synchronous and asynchronous erasure coding calculation based on updates
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs_exp.h>
.sp
.BI "int ibv_exp_ec_update_sync(struct ibv_exp_ec_calc " "*ec_calc" ,
.BI "                           struct ibv_exp_ec_mem " "*ec_mem",
.BI "                           uint8_t *data_updates,
.BI "                           uint8_t *code_updates);
.sp
.BI "int ibv_exp_ec_update_async(struct ibv_exp_ec_calc " "*ec_calc" ,
.BI "                            struct ibv_exp_ec_mem " "*ec_mem" ,
.BI "                            uint8_t *data_updates,
.BI "                            uint8_t *code_updates,
.BI "                            struct ibv_exp_ec_comp " "*ec_comp" );
.fi
.SH "DESCRIPTION"
.B ibv_exp_ec_update_sync()
performs synchronous erasure coding calculation based on blocks that are updated and previous code,
places the calculation result in a given set of coding blocks. The given buffers
and their logical block size are described in the erasure coding memory layout
.I ec_mem\fR.
.PP
.nf
struct ibv_exp_ec_mem {
.in +8
struct ibv_sge   *data_blocks;  /* array of data sg elements */
int              num_data_sge;  /* number of data sg elements */
struct ibv_sge   *code_blocks;  /* array of code sg elements */
int              num_code_sge;  /* number of code sg elements */
int              block_size;    /* logical block size */
.in -8
};
.fi

The erasure coding memory layout specifies the data set layout by
.I data_blocks\fR array of
.I num_data_sge\fR elements, and the code set layout by
.I code_blocks\fR array of
.I num_code_sge\fR elements. Both the data and code sets are assumed
to have a single unique logical
.I block_size\fR.

.PP
The calculation operation will block until the calculation is completed.
.fi

.B ibv_exp_ec_update_async()
equivalently performs non-blocking asynchronous erasure coding calculation
based on blocks that are updated and previous code
.PP
The erasure coding calculation completes by executing the provided erasure
coding completion handle
.I ec_comp\fR
.nf
struct ibv_exp_ec_comp {
.in +8
void (*done)(struct ibv_exp_ec_comp *comp);  /* function handle of the EC calculation completion */
enum ibv_exp_ec_status status;               /* status of the EC calculation */
.in -8
};
.fi

The caller is expected to pass a
.I ec_comp.done\fR function pointer to execute a post-calculation user-defined logic.
The caller is expected to check the completion status
.I ec_comp.status\fR in order to verify the calculation succeeded or failed.

.nf
enum ibv_exp_ec_status {
.in +8
IBV_EXP_EC_CALC_SUCCESS,   /* EC calc operation succeeded */
IBV_EXP_EC_CALC_FAIL,      /* EC calc operation failed */
.in -8
};
.fi

.PP
.SH "RETURN VALUE"
.B ibv_exp_ec_update_sync(),
returns 0 on successfully completed calculation, or the value of a calculation failure.
.PP
.B ibv_exp_ec_update_async(),
returns 0 on success, or the value of errno on failure (which indicates the
failure reason).
.SH "CONSTRAINTS"
.PP
.I ec_mem.data_blocks
attribute must be an sg constructed as C0 ... Cm Di D'i Dj D'j,
were C0 ... Cm are code blocks, Di and Dj are original i-th and j-th data blocks,
D'i and D'j are thir replacements and i<j.
.I ec_mem.num_data_sg
attribute must be equal to the number of data blocks in ec_mem.data_blocks,
which should be less then init attribute
.I ec_mem.code_blocks
attribute must be an sg constructed as Ci,Cj,... ,
were Ci, Cj, .. are redundancies that should be recomputed, and i < j.
.I ec_mem.num_code_sg
attribute must be equal to the number of code blocks in ec_mem.code_blocks,
which should be less then init attribute
.I K\fR.
.PP
.I ec_mem.num_code_sg
init attribute must be equal to the number of code blocks init attribute
.I M\fR.
.PP
.I data_updates
must be an array of bytes with size equal to init attribute number of data blocks
.I K\fR
.PP
.I code_updates
must be an array of bytes with size equal to init attribute number of code blocks
.I M\fR.
.PP
.SH "SEE ALSO"
.BR ibv_exp_ec_encode_sync (3),
.BR ibv_exp_ec_encode_async (3),
.BR ibv_exp_ec_decode_sync (3),
.BR ibv_exp_ec_decode_async (3),
.BR ibv_exp_alloc_ec_calc (3),
.BR ibv_exp_dealloc_ec_calc (3),
.SH "AUTHORS"
.TP
Jenny Derzhavetz <jennyf@mellanox.com>, Sagi Grimberg <sagig@mellanox.com>
