.\" -*- nroff -*-
.\"
.TH IBV_EXP_PEER_COMMIT_QP 3 2016-01-06 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_exp_peer_commit_qp, ibv_exp_rollback_qp \- get descriptors for post send, rollback post send
.br
ibv_exp_peer_peek_cq, ibv_exp_peer_abort_peek_cq \- get descriptors for peek, abort peek
.SH "SYNOPSIS"
.nf
.B #include <infiniband/peer_ops.h>
.sp
.BI "int ibv_exp_peer_commit_qp(struct ibv_qp *" qp ", struct ibv_exp_peer_commit *" peer );
.br
.BI "int ibv_exp_rollback_qp(struct ibv_qp *" qp ", struct ibv_exp_rollback_ctx *" rollback );
.sp
.BI "int ibv_exp_peer_peek_cq(struct ibv_cq *" cq ", struct ibv_exp_peer_peek *" peek_ctx );
.br
.BI "int ibv_exp_peer_abort_peek_cq(struct ibv_cq *" cq ", struct ibv_exp_peer_abort_peek *" abort_ctx );
.fi
.SH "DESCRIPTION"
.BR ibv_exp_peer_commit_qp ()
request descriptors for committing all WQEs currently
posted to the send work queue.
The argument
.I peer
is an
.I ibv_exp_peer_commit
struct
(as defined in
.IR <infiniband/peer_ops.h> ):
.sp
.nf
.in +4
struct ibv_exp_peer_commit {
	/* IN/OUT - linked list of empty/filled descriptors */
	struct peer_op_wr *storage;
	/* IN/OUT - number of allocated/filled descriptors */
	uint32_t entries;
	/* OUT - identifier used in ibv_exp_rollback_qp to rollback WQEs set */
	uint64_t rollback_id;
	uint32_t comp_mask; /* Reserved for future expensions, must be 0 */
};
.in -4
.fi
.sp
The function fills
.I storage
with descriptors, puts the number of filled descriptors into
.I entries
and puts the data necessary for
.BR ibv_exp_rollback_qp ()
to
.IR rollback_id .
The caller is responsible to ensure that the peer fences any data store
before executing the commit.

.BR ibv_exp_rollback_qp ()
indicate that the commit attempt failed.
The argument
.I rollback
is an
.I ibv_exp_rollback_ctx
struct:
.sp
.nf
.in +4
struct ibv_exp_rollback_ctx {
	uint64_t rollback_id; /* from ibv_exp_peer_commit call */
	uint32_t flags; /* from ibv_exp_rollback_flags */
	uint32_t comp_mask; /* Reserved for future expensions, must be 0 */
};
.in -4
.fi
.sp
Flags may contain following values:
.TP
.B IBV_EXP_ROLLBACK_ABORT_UNCOMMITED
Abort all WQEs which were not committed to HW yet. rollback_id is ignored.
.TP
.B IBV_EXP_ROLLBACK_ABORT_LATE
Abort the request even if there are following requests being aborted as well.
.P
.BR ibv_exp_peer_peek_cq ()
requests descriptors for peeking CQ in a specific
offset from the currently expected CQ entry.
The argument
.I peer_ctx
is an
.I ibv_exp_peer_peek
struct:
.sp
.nf
.in +4
struct ibv_exp_peer_peek {
	/* IN/OUT - linked list of empty/filled descriptors */
	struct peer_op_wr *storage;
	/* IN/OUT - number of allocated/filled descriptors */
	uint32_t entries;
	/* IN - How many CQ entries from the current poll_cq location
	 * on the CPU does the peer want to peek for completion
	 */
	uint32_t cqe_offset_from_head;
	/* OUT - identifier used in ibv_exp_peer_abort_peek_cq to advance CQ */
	uint64_t peek_id;
	uint32_t comp_mask; /* Reserved for future expensions, must be 0 */
};
.in -4
.fi
.sp
The function fills
.I storage
with descriptors, puts the number of filled descriptors into
.I entries
and puts the data necessary for
.BR ibv_exp_peer_abort_peek_cq ()
to
.IR peek_id .
A peek CQ request places a "block" on the relevant CQ entry.
Poll CQ requests to poll the CQ entry will fail with an error.
The block will be removed by executing the descriptors.
If the peer will not be able to execute the descriptors,
it should call
.BR ibv_exp_peer_abort_peek_cq ()
to remove the block.
.sp
.BR ibv_exp_peer_abort_peek_cq ()
aborts the peek operation.
The argument
.I abort_ctx
is an
.I ibv_exp_peer_abort_peek
struct:
.sp
.nf
.in +4
struct ibv_exp_peer_abort_peek {
	uint64_t peek_id; /* From the peer_peek_cq call */
	uint32_t comp_mask; /* Reserved for future expensions, must be 0 */
};
.in -4
.fi
.sp
This is necessary only if the peek descriptors were not executed.
After calling
.BR ibv_exp_abort_peek_cq ()
the caller must make sure the descriptors will not be executed.
.SS Operation Descriptors
Operation defined by linked list of
.I struct
peer_op_wr:
.sp
.nf
.in +4
struct peer_op_wr {
	struct peer_op_wr *next;
	enum ibv_exp_peer_op type;
	union {
		struct {
			uint64_t fence_flags; /* from ibv_exp_peer_fence */
		} fence;

		struct {
			uint32_t  data;
			uint32_t *target_va;
		} dword_va; /* Use for all operations targeting dword */

		struct {
			uint64_t  data;
			uint64_t *target_va;
		} qword_va; /* Use for all operations targeting qword */
	} wr;
	uint32_t comp_mask; /* Reserved for future expensions, must be 0 */
};
.in -4
.fi
.sp
Field
.I type
may take values of
.TP
.B IBV_EXP_PEER_OP_FENCE
Peer should perform synchronization barier.
Type of synchronization is passed via
.I fence.fence_flags
field.
.TP
.B IBV_EXP_PEER_OP_STORE_DWORD
Peer should store 32-bit value, provided by
.I dword_va.data
field into address given in
.IR dword_va.target_va .
.TP
.B IBV_EXP_PEER_OP_STORE_QWORD
Peer should store 64-bit value, provided by
.I qword_va.data
field into address given in
.IR qword_va.target_va .
.TP
.B IBV_EXP_PEER_OP_POLL_AND_DWORD
The peer should wait until the 32-bit value in the address given in
.I dword_va.target_va
and the value in
.I dword_va.data
combined using a bitwise-and operation yields zero result. *target_va & data == 0.
.TP
.B IBV_EXP_PEER_OP_POLL_NOR_DWORD
The peer should wait until the 32-bit value in the address given in
.I dword_va.target_va
and the value in
.I dword_va.data
combined using a bitwise-not-or operation yields zero result. ~(*target_va | data) == 0.
.SS Fence type
When performing synchronization barier type of barier is defined by combination of following options
.TP
.B IBV_EXP_PEER_FENCE_OP_READ
Finish all read operations issued till now.
.TP
.B IBV_EXP_PEER_FENCE_OP_WRITE
Finish all write opeartions issued till now.
.TP
.B IBV_EXP_PEER_FENCE_FROM_CPU
Finish all operations initiated by CPU.
.TP
.B IBV_EXP_PEER_FENCE_FROM_HCA
Finish all operations initiated by HCA.
.TP
.B IBV_EXP_PEER_FENCE_MEM_SYS
Finish all operations destined toward system RAM.
.TP
.B IBV_EXP_PEER_FENCE_MEM_PEER
Finish all operations destined toward peer memory.
.SH "RETURN VALUE"
.BR ibv_exp_peer_commit() " and " ibv_exp_rollback_qp()
returns 0 on success, or the value of errno on failure (which indicates the failure reason).
.SH "ERRORS"
.TP
.B ENOSPC
Number of operation descriptors is not sufficient.
.SH "SEE ALSO"
.BR peer_direct (7)
.SH "AUTHORS"
.TP
Artemy Kovalyov <artemyko@mellanox.com>
