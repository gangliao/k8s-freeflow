.TH IBV_EXP_CREATE_FLOW 3 2016-08-31 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_exp_create_flow, ibv_exp_destroy_flow \- create or destroy flow steering rules
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs_exp.h>
.sp
.BI "struct ibv_exp_flow *ibv_exp_create_flow(struct ibv_qp " "*qp" ,
.BI "          			                struct ibv_exp_flow_attr " "*flow");
.BI "int ibv_exp_destroy_flow(struct ibv_exp_flow " "*flow_id");
.sp
.fi
.SH "DESCRIPTION"
.SS ibv_exp_create_flow()
allows a user application QP
.I qp
to be attached into a specified flow
.I flow
which is defined in
.I <infiniband/verbs_exp.h>
.PP
.nf
struct ibv_exp_flow_attr {
.in +8
enum ibv_exp_flow_attr_type type;			/* Rule type - see below */
uint16_t size;							/* Size of command */
uint16_t priority;						/* Rule priority - See below */
uint8_t num_of_specs;					/* Number of ibv_flow_spec_xxx */
uint8_t port;							/* The uplink port number */
uint32_t flags;						/* Extra flags for rule - see below */
uint64_t reserved;						/* reserved for future growth (must be 0) */
/* Following are the optional layers according to user request
 * struct ibv_exp_flow_spec_xxx
 * struct ibv_exp_flow_spec_yyy
 */
.in -8
};
.sp
.nf
enum ibv_exp_flow_attr_type {
.in +8
IBV_EXP_FLOW_ATTR_NORMAL			= 0x0,		/* steering according to rule specifications */
IBV_EXP_FLOW_ATTR_ALL_DEFAULT		= 0x1,		/* default unicast and multicast rule - receive all Eth traffic which isn't steered to any QP */
IBV_EXP_FLOW_ATTR_MC_DEFAULT		= 0x2,		/* default multicast rule - receive all Eth multicast traffic which isn't steered to any QP */
IBV_EXP_FLOW_ATTR_SNIFFER		= 0x3,		/* sniffer rule - receive all port traffic */
.in -8
};
.sp
.nf
enum ibv_exp_flow_flags {
.in +8
IBV_EXP_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK = 1,	/* Apply the rules on packets that were sent from the attached QP through loopback. IB only.*/
.in -8
};
.fi
.sp
.nf
enum ibv_exp_flow_spec_type {
.in +8
IBV_EXP_FLOW_SPEC_ETH			= 0x20,   /* Flow specification of L2 header */
IBV_EXP_FLOW_SPEC_IB			= 0x21,   /* Flow specification of IB header */
IBV_EXP_FLOW_SPEC_IPV4			= 0x30,   /* Flow specification of IPv4 partial header */
IBV_EXP_FLOW_SPEC_IPV6			= 0x31,   /* Flow specification of IPv6 partial header */
IBV_EXP_FLOW_SPEC_IPV4_EXT		= 0x32,   /* Extended flow specification of IPv4 */
IBV_EXP_FLOW_SPEC_IPV6_EXT		= 0x33,   /* Extended flow specification of IPv6 */
IBV_EXP_FLOW_SPEC_TCP			= 0x40,   /* Flow specification of TCP header */
IBV_EXP_FLOW_SPEC_UDP			= 0x41,   /* Flow specification of UDP header */
IBV_EXP_FLOW_SPEC_VXLAN_TUNNEL	= 0x50,   /* Flow specification for VxLAN header */
IBV_EXP_FLOW_SPEC_INNER			= 0x100,  /* Used to filter the inner packet fields, should be set with other spec from above */
IBV_EXP_FLOW_SPEC_ACTION_TAG		= 0x1000, /* When there is a matching, the flow tag will be reported in the CQE */
.in -8
};
.br

Flow specification general structure:
.BR
struct ibv_exp_flow_spec_xxx {
	enum ibv_exp_flow_spec_type  type;
	uint16_t  size;			     /* Flow specification size = sizeof(struct ibv_exp_flow_spec_xxx) */
	struct ibv_exp_flow_xxx_filter val;
	struct ibv_exp_flow_xxx_filter mask; /* Defines which bits from the filter value are applicable when looking for a match in the incoming packet */
};
.br
For all flow specification fields, please refer to verbs_exp.h.
.PP
Each header struct holds the relevant network layer parameters for matching. To enforce the match, the
user sets a mask for each parameter. If the bit is set in the mask, the corresponding bit in the value should be matched.
.br
.B Network paramters in the relevant network structs should be given in network order (big endian).

.SS Flow domains and priority
Flow steering defines the concept of domain and priority. Each domain represents a user agent that can attach a flow. The domains are prioritized. A higher priority domain will always supersede a lower priority domain when their flow specifications overlap. In addition to the domain, there is priority within each of the domains. Each domain has at most 2^12 priorities. A lower priority numeric value (higher priority) takes precedence over matching rules with higher numeric priority value (lower priority). It is important to note that the priority value of a flow spec is used not only to establish the precedence of conflicting flow matches but also as a way to abstract the order on which flow specs are tested for matches. Flows with higher priorities will be tested before flows with lower priorities.
.br
.B IB verbs have the higher priority domain.
.PP
.SS ibv_exp_destroy_flow()
destroys the flow
.I flow_id\fR.
.SH "RETURN VALUE"
.B ibv_exp_create_flow()
returns a pointer to the flow, or NULL if the request fails.
.PP
.B ibv_exp_destroy_flow()
returns 0 on success, or the value of errno on failure (which indicates the failure reason).
.SH "NOTES"
1. These verbs are available only for devices supporting IBV_DEVICE_MANAGED_FLOW_STEERING and
only for QPs of Transport Service Type
.BR IBV_QPT_UD
or
.BR IBV_QPT_RAW_PACKET
.br
2. Most vendors support either full mask (all "1"s) or zero mask (all "0"s).
.br
3. User must memset the spec struct with zeros before using it.
.br
4. ether_type field in ibv_exp_flow_eth_filter is the ethertype following the last VLAN tag of the packet.
.br
.PP
.SH "AUTHORS"
.br
Below flow_attr defines a rule in priority 0 to match a destination
mac address and a source ipv4 address. For that, L2 and L3 specs are used.
.br
If there is a hit on this rule, means the
received packet has destination mac: 66:11:22:33:44:55 and source ip: 0x0B86C806,
the packet is steered to its attached qp.
.sp
.nf
struct raw_eth_flow_attr {
.in +8
struct ibv_exp_flow_attr            attr;
struct ibv_exp_flow_spec_eth        spec_eth;
struct ibv_exp_flow_spec_ipv4       spec_ipv4;
.in -8
} __attribute__((packed));
.sp
.nf
struct raw_eth_flow_attr flow_attr = {
.in +8
        .attr = {
                .comp_mask      = 0,
                .type           = IBV_EXP_FLOW_ATTR_NORMAL,
                .size           = sizeof(flow_attr),
                .priority       = 0,
                .num_of_specs   = 2,
                .port           = 1,
                .flags          = 0,
        },
        .spec_eth = {
                .type   = IBV_EXP_FLOW_SPEC_ETH,
                .size   = sizeof(struct ibv_exp_flow_spec_eth),
                .val = {
                        .dst_mac = {0x66, 0x11, 0x22, 0x33, 0x44, 0x55},
                        .src_mac = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                        .ether_type = 0,
                        .vlan_tag = 0,
                },
                .mask = {
                        .dst_mac = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
                        .src_mac = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
                        .ether_type = 0,
                        .vlan_tag = 0,
                }
        },
        .spec_ipv4 = {
                .type   = IBV_EXP_FLOW_SPEC_IPV4,
                .size   = sizeof(struct ibv_exp_flow_spec_ipv4),
                .val = {
                        .src_ip = 0x0B86C806,
                        .dst_ip = 0,
                },
                .mask = {
                        .src_ip = 0xFFFFFFFF,
                        .dst_ip = 0,
                }
        }
.in -8
};
.sp
.nf
.SH EXAMPLE
.TP
Matan Barak <matanb@mellanox.com>
.TP
Hadar Hen Zion <hadarh@mellanox.com>
.TP
Maor Gottlieb <maorg@mellanox.com>
