.\" -*- nroff -*-
.\"
.TH IBV_EXP_ALLOC_EC_CALC 3 2015-11-28 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_exp_alloc_ec_calc, ibv_exp_dealloc_ec_calc \- allocates or deallocates an erasure coding calculation context
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs_exp.h>
.sp
.BI "struct ibv_exp_ec_calc *ibv_alloc_ec_calc(struct ibv_pd " "*pd" ,
.BI "                                          struct ibv_exp_ec_calc_init_attr " "*attr" );
.sp
.BI "void ibv_dealloc_ec_calc(struct ibv_exp_ec_calc " "*calc" );
.fi
.SH "DESCRIPTION"
.B ibv_exp_alloc_ec_calc()
allocates an erasure coding calculation context associated with the
protection domain
.I pd\fR.
The erasure coding initialization attributes
.I attr
as defined in <infiniband/verbs.h>
.PP
.nf
struct ibv_exp_ec_calc_init_attr {
.in +8
uint32_t   comp_mask;           /* bitmask of ibv_exp_ec_calc_attr_comp_mask */
uint32_t   max_inflight_calcs;  /* maximum inflight calculations */
int        k;                   /* number of data blocks */
int        m;                   /* number of code blocks */
int        w;                   /* Galois field bits GF(2^w) */
int        max_data_sge;        /* maximum data sg elements to be used for encode/decode */
int        max_code_sge;        /* maximum code sg elements to be used for encode/decode */
uint8_t    *encode_matrix;      /* buffer that contain the encoding matrix */
int        affinity_hint;       /* affinity hint for asynchronous calcs completion steering */
int        polling;             /* polling mode (if set no completions will be generated by events) */
.in -8
};
.fi

.I comp_mask
enumerates the valid fields in ibv_exp_ec_calc_init_attr:
.PP
.nf
enum ibv_exp_ec_calc_attr_comp_mask {
.in +8
IBV_EXP_EC_CALC_ATTR_MAX_INFLIGHT       = (1 << 0),
IBV_EXP_EC_CALC_ATTR_K                  = (1 << 1),
IBV_EXP_EC_CALC_ATTR_M                  = (1 << 2),
IBV_EXP_EC_CALC_ATTR_W                  = (1 << 3),
IBV_EXP_EC_CALC_ATTR_MAX_DATA_SGE       = (1 << 4),
IBV_EXP_EC_CALC_ATTR_MAX_CODE_SGE       = (1 << 5),
IBV_EXP_EC_CALC_ATTR_ENCODE_MAT         = (1 << 6),
IBV_EXP_EC_CALC_ATTR_AFFINITY           = (1 << 7),
IBV_EXP_EC_CALC_ATTR_POLLING            = (1 << 8),
IBV_EXP_EC_CALC_INIT_ATTR_RESERVED      = (1 << 9),
.in -8
};
.fi

.PP
.I encode_matrix
is provided as a byte pointer. The matrix rank corresponds
to the number of data blocks
.I K\fR (rows) over the number of coding blocks
.I M\fR (columns).
.nf
10-4 encoding matrix (M) layout:
.in +8
 ---------------------------------------
|  M(1,1) |  M(1,2) |  M(1,3) |  M(1,4) |
 ---------------------------------------
|  M(2,1) |  M(2,2) |  M(2,3) |  M(2,4) |
 ---------------------------------------
|  M(3,1) |  M(3,2) |  M(3,3) |  M(3,4) |
 ---------------------------------------
|  M(4,1) |  M(4,2) |  M(4,3) |  M(4,4) |
 ---------------------------------------
|  M(5,1) |  M(5,2) |  M(5,3) |  M(5,4) |
 ---------------------------------------
|  M(6,1) |  M(6,2) |  M(6,3) |  M(6,4) |
 ---------------------------------------
|  M(7,1) |  M(7,2) |  M(7,3) |  M(7,4) |
 ---------------------------------------
|  M(8,1) |  M(8,2) |  M(8,3) |  M(8,4) |
 ---------------------------------------
|  M(9,1) |  M(9,2) |  M(9,3) |  M(9,4) |
 ---------------------------------------
| M(10,1) | M(10,2) | M(10,3) | M(10,4) |
 ---------------------------------------
.in -8

The encode matrix memory layout is as follows:
.in +8
 -----------------------------------------------------------------------------
| M(1,1) | M(1,2) | M(1,3) | M(1,4) | M(2,1) | M(2,2) | M(2,3) | M(2,4) | ... |
 -----------------------------------------------------------------------------
.in -8

};
.fi

.PP
The allocated erasure coding context shall be provided to any erasure coding routines.
.fi
.PP
.B ibv_exp_dealloc_ec_calc()
deallocates the erasure coding calculation context
.I calc\fR.
.fi
.PP
.SH "RETURN VALUE"
.B ibv_exp_alloc_ec_calc()
returns a pointer to struct ibv_exp_ec_calc, or NULL if the request fails with
errno value set.

.SH "CONSTRAINTS"
.PP
.I max_data_sg
init attribute must be equal to the number of data blocks init attribute
.I k\fR.
.I max_code_sg
init attribute must be equal to the number of code blocks init attribute
.I m\fR.
.PP
.SH "SEE ALSO"
.BR ibv_exp_ec_encode_sync (3),
.BR ibv_exp_ec_encode_async (3),
.BR ibv_exp_ec_decode_sync (3),
.BR ibv_exp_ec_decode_async (3),
.SH "AUTHORS"
.TP
Sagi Grimberg <sagig@mellanox.com>
