.\" -*- nroff -*-
.\"
.TH IBV_EXP_EC_DECODE_ASYNC 3 2015-11-28 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_exp_ec_decode_sync, ibv_exp_ec_decode_async  \- synchronous and asynchronous erasure decoding calculation
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs_exp.h>
.sp
.BI "int ibv_exp_ec_decode_sync(struct ibv_exp_ec_calc " "*ec_calc" ,
.BI "                           struct ibv_exp_ec_mem " "*ec_mem" ,
.BI "                           uint8_t* " "erasures" ,
.BI "                           uint8_t " "*decode_matrix" );
.sp
.BI "int ibv_exp_ec_decode_async(struct ibv_exp_ec_calc " "*ec_calc" ,
.BI "                            struct ibv_exp_ec_mem " "*ec_mem" ,
.BI "                            uint8_t* " "erasures" ,
.BI "                            uint8_t " "*decode_matrix" ,
.BI "                            struct ibv_exp_ec_comp " "*ec_comp" );
.fi
.SH "DESCRIPTION"
.B ibv_exp_ec_decode_sync()
performs synchronous erasure decoding calculation on a given set of data blocks and
code blocks and reconstructs the erased blocks described by
.I erasures\fR using the decoding matrix
.I decode_matrix\fR.
.PP
.nf
struct ibv_exp_ec_mem {
.in +8
struct ibv_sge   *data_blocks;  /* array of data sg elements */
int              num_data_sge;  /* number of data sg elements */
struct ibv_sge   *code_blocks;  /* array of code sg elements */
int              num_code_sge;  /* number of code sg elements */
int              block_size;    /* logical block size */
.in -8
};
.fi

The erasure coding memory layout specifies the data set layout by
.I data_blocks\fR array of
.I num_data_sge\fR elements, and the code set layout by
.I code_blocks\fR array of
.I num_code_sge\fR elements. Both the data and code sets are assumed
to have a single unique logical
.I block_size\fR.

.PP
The erasures are provided in a byte-map where first
.I K\fR bytes represent the data blocks and the following
.I M\fR bytes represent the coding blocks.
.nf
10-4 erasures byte-map:
.in +8
 ------------------------------------------
|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
-------------------------------------------
|code blocks|         data blocks         |
-------------------------------------------
.in -8
Each erased block is represented by a positively set byte in the erasures byte-map.
.fi

.PP
The decoding matrix is provided as a byte pointer. The matrix rank corresponds
to the number of blocks sufficient to recover the erased blocks
.I K\fR and the number of erasures (positively set bytes in
.I erasures\fR byte-map).
.nf
10-4 with 4 erasures decoding matrix (G) layout:
.in +8
 ---------------------------------------
|  G(1,1) |  G(1,2) |  G(1,3) |  G(1,4) |
 ---------------------------------------
|  G(2,1) |  G(2,2) |  G(2,3) |  G(2,4) |
 ---------------------------------------
|  G(3,1) |  G(3,2) |  G(3,3) |  G(3,4) |
 ---------------------------------------
|  G(4,1) |  G(4,2) |  G(4,3) |  G(4,4) |
 ---------------------------------------
|  G(5,1) |  G(5,2) |  G(5,3) |  G(5,4) |
 ---------------------------------------
|  G(6,1) |  G(6,2) |  G(6,3) |  G(6,4) |
 ---------------------------------------
|  G(7,1) |  G(7,2) |  G(7,3) |  G(7,4) |
 ---------------------------------------
|  G(8,1) |  G(8,2) |  G(8,3) |  G(8,4) |
 ---------------------------------------
|  G(9,1) |  G(9,2) |  G(9,3) |  G(9,4) |
 ---------------------------------------
| G(10,1) | G(10,2) | G(10,3) | G(10,4) |
 ---------------------------------------
.in -8

The decode matrix memory layout is as follows:
.in +8
 -----------------------------------------------------------------------------
| G(1,1) | G(1,2) | G(1,3) | G(1,4) | G(2,1) | G(2,2) | G(2,3) | G(2,4) | ... |
 -----------------------------------------------------------------------------
.in -8

.fi

.B ibv_exp_ec_decode_async()
equivalently performs non-blocking asynchronous erasure decoding calculation.
.PP
The erasure coding calculation completes by executing the provided erasure
coding completion handle
.I ec_comp\fR
.nf
struct ibv_exp_ec_comp {
.in +8
void (*done)(struct ibv_exp_ec_comp *comp);  /* function handle of the EC calculation completion */
enum ibv_exp_ec_status status;               /* status of the EC calculation */
.in -8
};
.fi

The caller is expected to pass a
.I ec_comp.done\fR function pointer to execute a post-calculation user-defined logic.
The caller is expected to check the completion status
.I ec_comp.status\fR in order to verify the calculation succeeded or failed.

.nf
enum ibv_exp_ec_status {
.in +8
IBV_EXP_EC_CALC_SUCCESS,   /* EC calc operation succeded */
IBV_EXP_EC_CALC_FAIL,      /* EC calc operation failed */
.in -8
};
.fi

.PP
.SH "RETURN VALUE"
.B ibv_exp_ec_decode_sync(),
returns 0 on successfully completed calculation, or the value of a calculation failure.
.PP
.B ibv_exp_ec_decode_async(),
returns 0 on success, or the value of errno on failure (which indicates the
failure reason).
.SH "CONSTRAINTS"
.PP
.I ec_mem.num_data_sg
attribute must be equal to the number of data blocks init attribute
.I K\fR.
.PP
.I ec_mem.num_code_sg
init attribute must be equal to the number of code blocks init attribute
.I M\fR.
.PP
.I block_size
must be multiplier of 64 bytes.
.PP
.I erasures
pointer to byte-map cannot set more bytes than
.I M\fR.
.PP
.SH "SEE ALSO"
.BR ibv_exp_ec_encode_sync (3),
.BR ibv_exp_ec_decode_sync (3),
.BR ibv_exp_ec_update_sync (3),
.BR ibv_exp_ec_update_async (3),
.BR ibv_exp_alloc_ec_calc (3),
.BR ibv_exp_dealloc_ec_calc (3),
.SH "AUTHORS"
.TP
Sagi Grimberg <sagig@mellanox.com>
